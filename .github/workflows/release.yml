name: Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.24.5'

jobs:
  attach-artifacts:
    name: 📦 Attach CI Artifacts to Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA for this release
        id: get-sha
        run: |
          # Get the commit SHA that this release tag points to
          COMMIT_SHA=$(git rev-list -n 1 ${{ github.ref_name }})
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "Looking for CI artifacts for commit: ${COMMIT_SHA}"

      - name: Find and download CI artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            
            const commitSha = '${{ steps.get-sha.outputs.commit_sha }}';
            console.log(`Looking for CI artifacts for commit: ${commitSha}`);
            
            // Find the most recent successful CI workflow run for this commit
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              head_sha: commitSha,
              status: 'completed',
              per_page: 5
            });
            
            if (runs.workflow_runs.length === 0) {
              console.log('⚠️ No completed CI workflow run found for this commit');
              console.log('This might happen if the release was created before CI completed');
              throw new Error('No CI artifacts available for this commit');
            }
            
            // Find the first successful run
            const successfulRun = runs.workflow_runs.find(run => run.conclusion === 'success');
            
            if (!successfulRun) {
              console.log('❌ No successful CI workflow run found for this commit');
              console.log('Available runs:', runs.workflow_runs.map(r => `${r.status}/${r.conclusion}`));
              throw new Error('No successful CI run found for this commit');
            }
            
            console.log(`✅ Found successful CI run: ${successfulRun.html_url}`);
            
            // Get all artifacts from this run
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: successfulRun.id,
            });
            
            console.log(`📦 Found ${artifacts.artifacts.length} artifacts in CI run`);
            console.log('Available artifacts:', artifacts.artifacts.map(a => `${a.name} (${a.size_in_bytes} bytes)`));
            
            // Download the release-artifacts (consolidated artifacts)
            const releaseArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-artifacts');
            
            if (releaseArtifact) {
              console.log(`📥 Downloading consolidated artifact: ${releaseArtifact.name}`);
              
              const download = await github.rest.actions.downloadArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: releaseArtifact.id,
                archive_format: 'zip',
              });
              
              fs.writeFileSync('release-artifacts.zip', Buffer.from(download.data));
              console.log('✅ Downloaded consolidated CI artifacts');
            } else {
              // Fallback: download individual platform artifacts
              console.log('⚠️ No consolidated release-artifacts found, downloading individual artifacts...');
              
              const platformArtifacts = artifacts.artifacts.filter(a => a.name.startsWith('matlas-'));
              
              if (platformArtifacts.length === 0) {
                throw new Error('No usable artifacts found in CI run');
              }
              
              // Download each platform artifact
              for (const artifact of platformArtifacts) {
                console.log(`📥 Downloading ${artifact.name}...`);
                
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip',
                });
                
                fs.writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
              }
              
              console.log('✅ Downloaded individual platform artifacts');
            }

      - name: Extract and upload artifacts
        run: |
          # Create a dist directory for all artifacts
          mkdir -p dist
          
          # Handle consolidated artifacts
          if [ -f "release-artifacts.zip" ]; then
            echo "📦 Extracting consolidated CI artifacts..."
            unzip -o release-artifacts.zip -d extracted/
            
            # Move extracted files to dist
            if [ -d "extracted/dist" ]; then
              cp -r extracted/dist/* dist/
            elif [ -d "extracted" ]; then
              cp -r extracted/* dist/
            fi
            
            echo "📋 Found consolidated artifacts:"
            ls -la dist/
          fi
          
          # Handle individual platform artifacts (fallback)
          for zip_file in matlas-*.zip; do
            if [ -f "$zip_file" ]; then
              echo "📦 Extracting individual artifact: $zip_file"
              unzip -o "$zip_file" -d platform_extract/
              cp -r platform_extract/* dist/ 2>/dev/null || true
              rm -rf platform_extract/
            fi
          done
          
          # Check if we have any artifacts to upload
          if [ -d "dist" ] && [ "$(ls -A dist/ 2>/dev/null)" ]; then
            echo "📋 Final artifacts ready for upload:"
            ls -la dist/
            
            echo "🚀 Uploading artifacts to release..."
            
            # Upload all zip and tar.gz files
            if ls dist/*.zip 1> /dev/null 2>&1; then
              gh release upload "${{ github.ref_name }}" dist/*.zip --clobber
            fi
            
            if ls dist/*.tar.gz 1> /dev/null 2>&1; then
              gh release upload "${{ github.ref_name }}" dist/*.tar.gz --clobber
            fi
            
            # Upload checksums if available
            if [ -f "dist/checksums.txt" ]; then
              gh release upload "${{ github.ref_name }}" dist/checksums.txt --clobber
            fi
            
            echo "✅ Artifacts uploaded successfully"
          else
            echo "❌ No artifacts found to upload"
            echo "This might indicate a problem with the CI workflow or artifact extraction"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: 📢 Notify Release Success
    runs-on: ubuntu-latest
    needs: attach-artifacts
    if: always()
    steps:
      - name: Create success summary
        run: |
          echo "# 🎉 Release ${{ github.ref_name }} Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Release with binaries (zip)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Install from GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo 'Download the archive for your OS/arch from the Release page and add `matlas` to your PATH.' >> $GITHUB_STEP_SUMMARY
