name: Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.24.5'

jobs:
  attach-artifacts:
    name: 📦 Attach CI Artifacts to Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get commit SHA for this release
        id: get-sha
        run: |
          # Get the commit SHA that this release tag points to
          COMMIT_SHA=$(git rev-list -n 1 ${{ github.ref_name }})
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "Looking for CI artifacts for commit: ${COMMIT_SHA}"

      - name: Find and download CI artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Find the CI workflow run for this commit
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci.yml',
              head_sha: '${{ steps.get-sha.outputs.commit_sha }}',
              per_page: 1
            });
            
            if (runs.workflow_runs.length === 0) {
              console.log('⚠️ No CI workflow run found for this commit');
              console.log('Building artifacts directly as fallback...');
              return;
            }
            
            const run = runs.workflow_runs[0];
            console.log(`Found CI run: ${run.html_url}`);
            
            if (run.conclusion !== 'success') {
              throw new Error(`CI workflow did not succeed. Status: ${run.status}, Conclusion: ${run.conclusion}`);
            }
            
            // Download the release-artifacts
            const { data: artifacts } = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: run.id,
            });
            
            const releaseArtifact = artifacts.artifacts.find(artifact => artifact.name === 'release-artifacts');
            
            if (!releaseArtifact) {
              console.log('⚠️ No release-artifacts found in CI run');
              console.log('Available artifacts:', artifacts.artifacts.map(a => a.name));
              return;
            }
            
            console.log(`Downloading artifact: ${releaseArtifact.name}`);
            
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: releaseArtifact.id,
              archive_format: 'zip',
            });
            
            fs.writeFileSync('artifacts.zip', Buffer.from(download.data));
            console.log('✅ Downloaded CI artifacts');

      - name: Extract and upload artifacts
        run: |
          if [ -f "artifacts.zip" ]; then
            echo "📦 Extracting CI artifacts..."
            unzip -o artifacts.zip
            ls -la
            
            if [ -d "dist" ] && [ "$(ls -A dist/)" ]; then
              echo "📋 Found artifacts:"
              ls -la dist/
              
              echo "🚀 Uploading artifacts to release..."
              gh release upload "${{ github.ref_name }}" dist/*.zip dist/*.tar.gz dist/checksums.txt --clobber
              echo "✅ Artifacts uploaded successfully"
            else
              echo "⚠️ No artifacts found in dist directory"
            fi
          else
            echo "⚠️ No artifacts.zip file found, skipping upload"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    name: 📢 Notify Release Success
    runs-on: ubuntu-latest
    needs: attach-artifacts
    if: always()
    steps:
      - name: Create success summary
        run: |
          echo "# 🎉 Release ${{ github.ref_name }} Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Release with binaries (zip)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Install from GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo 'Download the archive for your OS/arch from the Release page and add `matlas` to your PATH.' >> $GITHUB_STEP_SUMMARY
