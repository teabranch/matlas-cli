name: Release

on:
  release:
    types: [published]

permissions:
  contents: write
  packages: write

env:
  GO_VERSION: '1.24.5'

jobs:
  build-and-upload:
    name: Build and upload binaries
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build binaries for Linux, macOS, Windows
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p dist
          VERSION="${{ github.ref_name }}"
          APP=matlas
          # Matrix of targets
          targets=(
            "linux amd64"
            "darwin amd64"
            "darwin arm64"
            "windows amd64"
          )
          for t in "${targets[@]}"; do
            read -r GOOS GOARCH <<<"$t"
            BIN_NAME="${APP}"
            EXT=""
            if [ "$GOOS" = "windows" ]; then EXT=".exe"; fi
            OUT_DIR="dist/${APP}_${GOOS}_${GOARCH}"
            mkdir -p "$OUT_DIR"
            echo "Building $OUT_DIR/${APP}${EXT}"
            GOOS="$GOOS" GOARCH="$GOARCH" CGO_ENABLED=0 \
              go build -trimpath -ldflags "-s -w" -o "$OUT_DIR/${APP}${EXT}" ./
            (cd dist && zip -r "${APP}_${GOOS}_${GOARCH}.zip" "${APP}_${GOOS}_${GOARCH}")
          done
          # Checksums
          (cd dist && sha256sum *.zip > checksums.txt || shasum -a 256 *.zip > checksums.txt)

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.zip
            dist/checksums.txt

  notify-success:
    name: ðŸ“¢ Notify Release Success
    runs-on: ubuntu-latest
    needs: build-and-upload
    if: always()
    steps:
      - name: Create success summary
        run: |
          echo "# ðŸŽ‰ Release ${{ github.ref_name }} Published" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“¦ Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- âœ… GitHub Release with binaries (zip)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## ðŸ“‹ Install from GitHub Releases" >> $GITHUB_STEP_SUMMARY
          echo 'Download the archive for your OS/arch from the Release page and add `matlas` to your PATH.' >> $GITHUB_STEP_SUMMARY
