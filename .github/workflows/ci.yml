name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'fix/*' ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.24.5'
  GOLANGCI_LINT_VERSION: 'v2.3.1'

jobs:
  # ==============================================================================
  # Code Quality and Security
  # ==============================================================================
  
  lint:
    name: 🔍 Code Quality & Linting
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Dependencies
        run: go mod download

      - name: Sync vendor (ensure consistent vendoring for linter)
        run: |
          go mod tidy
          go mod vendor

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v7
        with:
          version: ${{ env.GOLANGCI_LINT_VERSION }}
          args: --no-config --enable-only=errcheck,gosec,ineffassign --timeout=5m

      - name: Check Code Formatting
        run: |
          if [ "$(gofmt -s -l . | grep -v vendor/ | wc -l)" -gt 0 ]; then
            echo "❌ Code is not properly formatted. Run 'gofmt -s -w .'"
            echo "Files that need formatting:"
            gofmt -s -l . | grep -v vendor/
            exit 1
          fi
          echo "✅ Code is properly formatted"

      - name: Check Go Modules
        run: |
          go mod tidy
          if ! git diff --exit-code go.mod go.sum; then
            echo "❌ go.mod or go.sum is not up to date. Run 'go mod tidy'"
            exit 1
          fi
          echo "✅ Go modules are up to date"

  # ==============================================================================
  # Testing Matrix
  # ==============================================================================
  
  test:
    name: 🧪 Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23', '1.24.5']
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}

      - name: Sync vendor
        run: |
          go mod tidy
          go mod vendor

      - name: Download Dependencies
        run: go mod download

      - name: Create Test Temp Directory
        shell: bash
        run: |
          mkdir -p "${{ runner.temp }}/go-test-${{ matrix.os }}-${{ matrix.go-version }}"

      - name: Run Unit Tests
        env:
          CGO_ENABLED: 1
          GOMAXPROCS: 2
          TMPDIR: ${{ runner.temp }}/go-test-${{ matrix.os }}-${{ matrix.go-version }}
          TMP: ${{ runner.temp }}/go-test-${{ matrix.os }}-${{ matrix.go-version }}
          TEMP: ${{ runner.temp }}/go-test-${{ matrix.os }}-${{ matrix.go-version }}
        shell: bash
        run: go test -race -coverprofile="./coverage.out" -covermode=atomic -timeout=10m -p=1 ./...

      - name: Upload Coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.go-version == '1.24.5'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella

  integration-test:
    name: 🔧 Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: |
      github.event_name == 'pull_request' && 
      contains(github.event.pull_request.labels.*.name, 'integration-tests') ||
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Application
        run: go build -o matlas .

      - name: Run Integration Tests (Safe Mode)
        env:
          ATLAS_PUBLIC_KEY: ${{ secrets.ATLAS_PUBLIC_KEY }}
          ATLAS_PRIVATE_KEY: ${{ secrets.ATLAS_PRIVATE_KEY }}
          ATLAS_PROJECT_ID: ${{ secrets.ATLAS_TEST_PROJECT_ID }}
          ATLAS_ORG_ID: ${{ secrets.ATLAS_TEST_ORG_ID }}
        run: |
          if [ -n "$ATLAS_PUBLIC_KEY" ] && [ -n "$ATLAS_PRIVATE_KEY" ]; then
            echo "🧪 Running integration tests with Atlas credentials"
            ./scripts/run-integration-tests-safe.sh all
          else
            echo "⚠️ Skipping integration tests - Atlas credentials not available"
            echo "To enable integration tests, add Atlas credentials to repository secrets"
          fi

  e2e-test:
    name: 🚀 End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    if: |
      github.event_name == 'pull_request' && 
      contains(github.event.pull_request.labels.*.name, 'e2e-tests') ||
      github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build Application
        run: go build -o matlas .

      - name: Run E2E Tests
        env:
          ATLAS_PUBLIC_KEY: ${{ secrets.ATLAS_PUBLIC_KEY }}
          ATLAS_PRIVATE_KEY: ${{ secrets.ATLAS_PRIVATE_KEY }}
          ATLAS_PROJECT_ID: ${{ secrets.ATLAS_TEST_PROJECT_ID }}
          ATLAS_ORG_ID: ${{ secrets.ATLAS_TEST_ORG_ID }}
        run: |
          if [ -n "$ATLAS_PUBLIC_KEY" ] && [ -n "$ATLAS_PRIVATE_KEY" ]; then
            echo "🚀 Running E2E tests with Atlas credentials"
            ./scripts/run-e2e-tests.sh all
          else
            echo "⚠️ Skipping E2E tests - Atlas credentials not available"
          fi

  # ==============================================================================
  # Build and Release
  # ==============================================================================
  
  build:
    name: 🏗️ Build Artifacts
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [lint, test]
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
            goos: linux
            goarch: amd64
          - os: linux
            arch: arm64
            goos: linux
            goarch: arm64
          - os: darwin
            arch: amd64
            goos: darwin
            goarch: amd64
          - os: darwin
            arch: arm64
            goos: darwin
            goarch: arm64
          - os: windows
            arch: amd64
            goos: windows
            goarch: amd64
            ext: .exe
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go Modules
        uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - name: Build Binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          VERSION=${GITHUB_REF_NAME:-dev}
          COMMIT=$(git rev-parse --short HEAD)
          BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          go build \
            -ldflags="-s -w -X main.version=${VERSION} -X main.commit=${COMMIT} -X main.buildTime=${BUILD_TIME}" \
            -o "matlas-${VERSION}-${{ matrix.os }}-${{ matrix.arch }}${{ matrix.ext }}" \
            .

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: matlas-${{ matrix.os }}-${{ matrix.arch }}
          path: matlas-*
          retention-days: 90



  # ==============================================================================
  # Release Management
  # ==============================================================================
  
  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build]
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Create Release Assets
        run: |
          mkdir -p release-assets
          for dir in artifacts/*/; do
            cd "$dir"
            for file in matlas-*; do
              if [[ "$file" == *.exe ]]; then
                zip "../../release-assets/${file%.exe}.zip" "$file"
              else
                tar -czf "../../release-assets/${file}.tar.gz" "$file"
              fi
            done
            cd - > /dev/null
          done
          
          # Generate checksums
          cd release-assets
          sha256sum * > checksums.txt
          cd ..

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-assets/*
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(github.ref_name, '-') }}

  # ==============================================================================
  # Deployment and Notifications
  # ==============================================================================
  
